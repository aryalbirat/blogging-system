generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  firstName String
  middleName String?
  lastName  String
  dob       DateTime
  email     String   @unique
  phoneNo   String
  password  String
  userType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdCategories Category[]
  createdBlogs     Blog[]
  likes           Like[]
  comments        Comment[]

  @@map("users")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  status    String   @default("ACTIVE")
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  blogs   Blog[]

  @@map("categories")
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  body      String
  status    String   @default("ACTIVE")
  categoryId String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creator  User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]

  @@map("blogs")
}

model Like {
  id      String @id @default(cuid())
  userId  String
  blogId  String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@map("likes")
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  blogId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Removed enum types for SQLite compatibility. Enforce allowed values in application/business logic.
